#version 410

uniform mat4 gWVPXf : WorldViewProjection;
uniform mat4 world : World;
uniform mat4 gWVXf : WorldView;
uniform mat4 gPXf : Projection;

attribute VS_INPUT {
    vec3 inPosition : POSITION;
    vec2 inUVset0 : TEXCOORD0;
    vec3 inNormal : NORMAL;
};

attribute VS_TO_PS {
    vec3 vsPosition : POSITION;
    vec4 vsUVset0 : TEXCOORD0;
    vec3 vsNormal : NORMAL;
};

attribute PS_OUT {
    vec4 colorOut : COLOR0;
};

uniform vec4 diffuseColor = { 0.5, 0.0, 0.5, 1.0 };


GLSLShader ShaderVertex {
    void main() {
        vs_output.vsNormal = (world * vec4(inNormal, 1.0)).xyz;
        vs_output.vsUVset0 = vec4(inUVset0.x, 1.0f - inUVset0.y, 0, 0);
        gl_Position = gWVPXf*vec4(inPosition, 1.0);
    }
}

GLSLShader ShaderPixel {
    void main() {
        colorOut = vec4(px_input.vsNormal.xyz, 1.0);
    }
}

technique Main {
    pass P0 {
        VertexShader (in VS_INPUT, out VS_TO_PS vs_output) = ShaderVertex;
        PixelShader (in VS_TO_PS px_input, out PS_OUT) = ShaderPixel;
    }
}