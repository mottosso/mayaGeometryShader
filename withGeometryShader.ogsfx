#version 410

uniform mat4 gWVPXf : WorldViewProjection;
uniform mat4 world : World;
uniform mat4 gWVXf : WorldView;
uniform mat4 gPXf : Projection;

attribute VS_INPUT {
    vec3 inPosition : POSITION;
    vec3 inNormal : NORMAL;
};

attribute VS_TO_GEO {
    vec3 vPosition : POSITION;
    vec3 vNormal : NORMAL;
};

attribute GEO_TO_PS {
    vec4 gColor;
}

attribute PS_OUT {
    vec4 colorOut : COLOR0;
};

uniform float scale = { 1.0 };


GLSLShader ShaderVertex {
    void main() {
        mat4 scaleMat = mat4(scale, 0, 0, 0,
                             0, scale, 0, 0,
                             0, 0, scale, 0,
                             0, 0, 0, 1);

        vs_out.vPosition = normalize(world * vec4(inPosition, 1.0)).xyz;
        vs_out.vNormal = normalize(world * vec4(inNormal, 1.0)).xyz;
        gl_Position = scaleMat * gWVPXf * vec4(inPosition, 1.0);
    }
}

GLSLShader ShaderGeometry {
    layout(triangles_adjacency) in;
    layout(line_strip, max_vertices = 15) out;

    void main()
    {
        geo_out.gColor = vec4(geo_in[0].vPosition.xyz, 1.0);
        gl_Position = gl_in[0].gl_Position;
        EmitVertex();
        gl_Position = gl_in[2].gl_Position;
        EmitVertex();
        gl_Position = gl_in[4].gl_Position;
        EmitVertex();
        EndPrimitive();
    }
}

GLSLShader ShaderPixel {
    void main() {
        colorOut = ps_in.gColor;
    }
}

technique Main
<
    string index_buffer_type = "GLSL_TRIADJ";
>
{
    pass P0
    <
        string drawContext = "colorPass";
    >
    {
        VertexShader (in VS_INPUT, out VS_TO_GEO vs_out) = ShaderVertex;
        GeometryShader (in VS_TO_GEO geo_in, out GEO_TO_PS geo_out) = ShaderGeometry;
        PixelShader (in GEO_TO_PS ps_in, out PS_OUT) = ShaderPixel;
    }
}